#include <Update.h>
#include <WiFi.h>
#include <FirebaseESP32.h>

// FIREBASE DATA

#define FIREBASE_HOST "smartmetter-1a0c2-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "lSNzFpUJt21JOBl9TZU2ctdLZ0UJBHIwipuAsb4E"

// WIFI DATA
#define WIFI_SSID "hoo"
#define WIFI_PASSWORD "123456789"

// Asignacion Entrdas y Salidas
const int ElectroValve = 32;
const int Sensor = 27;
const int ledR = 33;
const int ledV = 25;
const int ledA = 26;

// Variables de configuracion de funcionamiento
String limiteStr;
int limite = 3000;
int intervalo = 1000;
const int ledlight = 20;

// Asignacion variables criticas

float litros;
long totalMililitros;
int mililitrosFlujo;
float caudal;
long tiempoActual = 0;
long tiempoAnterior = 0;
volatile long conteoPulsos = 0;
byte pulsosPorSegundo = 0;

// Valores de defecto
bool estadoLed = LOW;
float factorCalibracion = 4.5;

FirebaseData firebaseData;
FirebaseAuth auth;
FirebaseConfig config;

void IRAM_ATTR contadorPulsos()
{
  conteoPulsos++;
}

void setup()
{
  // Inicializacion del puerto Serial
  Serial.begin(9600);
  pinMode(ElectroValve, OUTPUT);
  pinMode(ledR, OUTPUT);
  pinMode(ledV, OUTPUT);
  pinMode(ledA, OUTPUT);
  pinMode(Sensor, INPUT_PULLUP);

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  // Configuración de Firebase
  config.host = FIREBASE_HOST;
  config.signer.tokens.legacy_token = FIREBASE_AUTH;

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);

  // Ajuste del tiempo de espera de la operación
  config.timeout.serverResponse = 10 * 1000;

  // Corte de operacion de si falla lectura del sensor
  attachInterrupt(digitalPinToInterrupt(Sensor), contadorPulsos, FALLING);

  // Prueba de pilotos
  analogWrite(ledV, ledlight);
  delay(250);
  analogWrite(ledV, 0);
  delay(250);
  digitalWrite(ledR, HIGH);
  delay(250);
  digitalWrite(ledR, LOW);
  delay(250);
  digitalWrite(ledA, HIGH);
  delay(250);
  digitalWrite(ledA, LOW);
  delay(250);
}

void loop()
{
  // Inicializacion de tiempo de intervalo para toma de pulsos del caudalimetro
  tiempoActual = millis();
  if (tiempoActual - tiempoAnterior >= intervalo)
  {
    // Recopilacion de datos y calculo de caudal respecto a la toma de pulsos
    pulsosPorSegundo = conteoPulsos;
    conteoPulsos = 0;
    caudal = ((1000.0 / (tiempoActual - tiempoAnterior)) * pulsosPorSegundo) / factorCalibracion;
    tiempoAnterior = tiempoActual;

    // Calculo de volumen del agua en circulacion
    mililitrosFlujo = (caudal / 60) * 1000;
    totalMililitros += mililitrosFlujo;
    litros = totalMililitros / 1000;

    // Representacion de datos puerto Serial
    Serial.print("Caudal: ");
    Serial.print(caudal);
    Serial.println(" L/min");
    Serial.print("Volumen total: ");
    Serial.print(totalMililitros);
    Serial.println(" ml");

    // Enviar litros a Firebase
    Firebase.setFloat(firebaseData, "litros", totalMililitros);

    // Recibir limite de cierre de la valvula
    Firebase.getFloat(firebaseData, "limite");
    int limiteFirebase = firebaseData.intData();
    Serial.print("limite: ");
    Serial.print(limiteFirebase);
    Serial.println(" L");

    // Cierre de la valvula con limite
    if (litros >= limiteFirebase)
    {
      digitalWrite(ElectroValve, HIGH);
      Serial.println("Limite alcanzado ");
      analogWrite(ledV, 0);
      digitalWrite(ledR, HIGH);
    }
    else
    {
      digitalWrite(ElectroValve, LOW);
      digitalWrite(ledR, LOW);
      analogWrite(ledV, ledlight);
    }

    // Adquisicion de varaible desde Firebase para cierre forzado de la valvula
    Firebase.getInt(firebaseData, "E");
    int Encvalve = firebaseData.intData();
    Serial.print("Estado Forzado de cierre: ");
    Serial.println(Encvalve);

    // Forzado de momento de cierre de la valvula
    while (Encvalve != 0)
    {
      digitalWrite(ElectroValve, HIGH);
      analogWrite(ledV, 0);
      digitalWrite(ledR, HIGH);
      delay(1000);
      digitalWrite(ledR, LOW);
      delay(1000);
      Firebase.getInt(firebaseData, "E");
      Encvalve = firebaseData.intData();
    }

    // Adquisicion de varaible de firebase para reinicio forzado del contador de litros
    Firebase.getInt(firebaseData, "reslitros");
    int Restvalve = firebaseData.intData();
    Serial.print("Estado Reinicio de contador: ");
    Serial.println(Restvalve);

    // Reinicio forzado del contador de litros
    while (Restvalve != 0)
    {
      totalMililitros, litros = 0;
      digitalWrite(ledV, LOW);
      digitalWrite(ledA, HIGH);
      delay(250);
      digitalWrite(ledA, LOW);
      Firebase.getInt(firebaseData, "reslitros");
      Restvalve = firebaseData.intData();
    }
  }
}
